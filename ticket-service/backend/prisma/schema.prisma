// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  tickets      Ticket[]

  @@map("users")
}

model Guest {
  id              String    @id @default(uuid())
  email           String
  verificationCode String?   @map("verification_code")
  verifiedAt      DateTime? @map("verified_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  tickets         Ticket[]

  @@map("guests")
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")
  seats       Seat[]
  tickets     Ticket[]

  @@map("events")
}

model Seat {
  id         String   @id @default(uuid())
  eventId    String   @map("event_id")
  seatNumber String   @map("seat_number")
  isReserved Boolean  @default(false) @map("is_reserved")
  createdAt  DateTime @default(now()) @map("created_at")
  event      Event    @relation(fields: [eventId], references: [id])
  tickets    Ticket[]

  @@unique([eventId, seatNumber])
  @@map("seats")
}

model Ticket {
  id          String         @id @default(uuid())
  eventId     String         @map("event_id")
  seatId      String         @map("seat_id")
  userId      String?        @map("user_id")
  guestId     String?        @map("guest_id")
  status      TicketStatus   @default(RESERVED)
  reservedAt  DateTime       @default(now()) @map("reserved_at")
  cancelledAt DateTime?      @map("cancelled_at")
  refundedAt  DateTime?      @map("refunded_at")
  event       Event          @relation(fields: [eventId], references: [id])
  seat        Seat           @relation(fields: [seatId], references: [id])
  user        User?          @relation(fields: [userId], references: [id])
  guest       Guest?         @relation(fields: [guestId], references: [id])
  refundRequests RefundRequest[]

  @@map("tickets")
}

model RefundRequest {
  id          String    @id @default(uuid())
  ticketId    String    @map("ticket_id")
  requestedAt DateTime  @default(now()) @map("requested_at")
  approved    Boolean   @default(false)
  approvedAt  DateTime? @map("approved_at")
  reason      String?
  ticket      Ticket    @relation(fields: [ticketId], references: [id])

  @@map("refund_requests")
}

enum Role {
  USER
  ADMIN
}

enum TicketStatus {
  RESERVED
  CANCELLED
  REFUNDED
}
